from flask import Flask, jsonify, request
from flask_cors import CORS
import pyodbc
import datetime
from datetime import time, date,datetime,timedelta
from dateutil import parser

app = Flask(__name__)
CORS(app)

# Ham lay ket noi moi moi lan goi
def get_connection():
    return pyodbc.connect(
        r"Driver={SQL Server};"
        r"Server=DESKTOP-3KJNUII\SQLEXPRESS;"
        r"Database=QuanLyCafe;"
        r"Trusted_Connection=yes;"
    )

@app.route('/api/login', methods=['POST'])
def login():
    data = request.get_json()
    username = data.get("username")
    password = data.get("password")

    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT A.idAccount, A.loaiTaiKhoan, KH.Ten, KH.sdt
                FROM Account A
                JOIN KhachHang KH ON KH.idAccount = A.idAccount
                WHERE A.tenDangNhap = ? AND A.matKhau = ?
            """, username, password)
            row = cursor.fetchone()
            if row:
                return jsonify({
                    "success": True,
                    "message": "ƒêƒÉng nh·∫≠p th√†nh c√¥ng",
                    "userId": row[0],
                    "role": row[1],  # v√≠ d·ª•: 'admin' ho·∫∑c 'user'
                    "ten": row[2],     # üëà Tr·∫£ v·ªÅ t√™n ng∆∞·ªùi d√πng
                    "sdt": row[3]      # üëà Tr·∫£ v·ªÅ s·ªë ƒëi·ªán tho·∫°i
                }), 200
            else:
                return jsonify({"success": False, "message": "Sai t√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u"}), 401
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500

@app.route('/api/dangky', methods=['POST'])
def dang_ky():
    data = request.get_json()
    tenDangNhap = data.get("username")
    matKhau = data.get("password")
    ten = data.get("hoTen")
    sdt = data.get("sdt")
    loaiTaiKhoan = data.get("loaiTaiKhoan", "user")

    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # üîí Ki·ªÉm tra tr√πng t√™n ƒëƒÉng nh·∫≠p
            cursor.execute("SELECT COUNT(*) FROM Account WHERE tenDangNhap = ?", tenDangNhap)
            if cursor.fetchone()[0] > 0:
                return jsonify({"success": False, "message": "T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i"}), 400

            # ‚úÖ Sinh idAccount ki·ªÉu AC001, AC002,...
            cursor.execute("SELECT idAccount FROM Account")
            account_rows = cursor.fetchall()
            account_ids = [int(row[0][2:]) for row in account_rows if row[0].startswith("AC")]
            new_account_number = max(account_ids) + 1 if account_ids else 1
            idAccount = f"AC{new_account_number:03d}"

            # ‚úÖ Th√™m v√†o b·∫£ng Account
            cursor.execute("""
                INSERT INTO Account (idAccount, tenDangNhap, matKhau, loaiTaiKhoan)
                VALUES (?, ?, ?, ?)
            """, idAccount, tenDangNhap, matKhau, loaiTaiKhoan)

            # ‚úÖ Sinh idKhachHang ki·ªÉu KH001, KH002,...
            cursor.execute("SELECT idKhachHang FROM KhachHang")
            kh_rows = cursor.fetchall()
            kh_ids = [int(row[0][2:]) for row in kh_rows if row[0].startswith("KH")]
            new_kh_number = max(kh_ids) + 1 if kh_ids else 1
            idKhachHang = f"KH{new_kh_number:03d}"

            # ‚úÖ Th√™m v√†o b·∫£ng KhachHang
            cursor.execute("""
                INSERT INTO KhachHang (idKhachHang, sdt, Ten, idAccount)
                VALUES (?, ?, ?, ?)
            """, idKhachHang, sdt, ten, idAccount)

            conn.commit()
            return jsonify({"success": True, "message": "ƒêƒÉng k√Ω th√†nh c√¥ng"}), 201

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500

@app.route('/api/phanquyen', methods=['GET'])
def phan_quyen():
    user_id = request.args.get("id")
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT loaiTaiKhoan FROM Account WHERE idAccount = ?", user_id)
            row = cursor.fetchone()
            if row:
                return jsonify({"success": True, "role": row[0]}), 200
            else:
                return jsonify({"success": False, "message": "Kh√¥ng t√¨m th·∫•y t√†i kho·∫£n"}), 404
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500


# ‚úÖ API: l·∫•y to√†n b·ªô s·∫£n ph·∫©m t·ª´ b·∫£ng ThucDon
@app.route('/api/thucdon', methods=['GET'])
def get_all_thucdon():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM ThucDon")
            columns = [column[0] for column in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]
            return jsonify(results), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

#API khuy·∫øn m√£i
@app.route('/api/khuyenmai', methods=['GET'])
def get_all_khuyenmai():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM KhuyenMai")
            columns = [column[0] for column in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]
            return jsonify(results), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500


    try:
        return datetime.strptime(gio_str, "%H:%M")  # v√≠ d·ª•: '00:30'
    except ValueError:
        try:
            return datetime.strptime(gio_str, "%I:%M %p")  # v√≠ d·ª•: '12:30 AM'
        except ValueError:
            try:
                gio_str = gio_str.split('.')[0]  # lo·∫°i b·ªè .0000000 n·∫øu c√≥
                return datetime.strptime(gio_str, "%H:%M:%S")
            except Exception as e:
                raise ValueError(f"‚ùå Kh√¥ng parse ƒë∆∞·ª£c gi·ªù: {gio_str}, l·ªói: {e}")
@app.route('/api/datbanonline', methods=['POST'])
def dat_ban():
    data = request.get_json()
    ten = data.get("ten")
    sdt = data.get("sdt")
    email = data.get("email")
    ngay = data.get("ngayDat")
    gio = data.get("gioDat")
    soNguoi = data.get("soNguoi")
    ghiChu = data.get("ghiChu")


    try:
        with get_connection() as conn:
            cursor = conn.cursor()


            # 1 T√¨m b√†n tr·ªëng theo th·ªùi gian h·ª£p l·ªá
            cursor.execute("SELECT idBan FROM Ban")
            all_bans = [row[0] for row in cursor.fetchall()]

            # Gh√©p datetime ƒë·∫∑t m·ªõi
            gio = gio.split(":")[0] + ":" + gio.split(":")[1]  # l·∫•y 'HH:MM' ph·∫ßn ƒë·∫ßu
            gio_dat =   datetime.strptime(gio, "%H:%M")
            ngay_dat = datetime.strptime(ngay, "%Y-%m-%d").date()
            thoidiem_dat_moi = datetime.combine(ngay_dat, gio_dat.time())

            valid_ban = None
            for idBan in all_bans:
                cursor.execute("""
                    SELECT ngayDat, gioDat FROM DatBan
                    WHERE idBan = ? AND ngayDat = ?
                """, idBan, ngay)
                rows = cursor.fetchall()

                conflict = False
                for r in rows:
                    # r[0] = ngayDat, r[1] = gioDat
                    print("‚è∞ Gi·ªù ƒë√£ ƒë·∫∑t:", r[1])
                    gio_str = str(r[1]).split('.')[0]  # c·∫Øt b·ªè ph·∫ßn .0000000 n·∫øu c√≥
                    gio_db = datetime.strptime(f"{r[0]} {gio_str}", "%Y-%m-%d %H:%M:%S")

                    print("üÜö So v·ªõi gi·ªù m·ªõi:", thoidiem_dat_moi)
                    print("‚è± Ch√™nh l·ªách:", abs((thoidiem_dat_moi - gio_db).total_seconds()))

                    if abs((thoidiem_dat_moi - gio_db).total_seconds()) < 7200:
                        conflict = True
                        print("‚ùå Tr√πng gi·ªù v·ªõi l·ªãch:", gio_db)
                        break

                if not conflict:
                    valid_ban = idBan
                    break

            if not valid_ban:
                return jsonify({"error": "Kh√¥ng c√≤n b√†n n√†o tr·ªëng v√†o khung gi·ªù ƒë√≥ (m·ªói b√†n c√°ch nhau √≠t nh·∫•t 2 ti·∫øng)"}), 400
            # 2. T·∫°o idKhachHang t·ª± ƒë·ªông (ki·ªÉm tra n·∫øu ƒë√£ t·ªìn t·∫°i th√¨ kh√¥ng t·∫°o m·ªõi)
            cursor.execute("SELECT idKhachHang FROM KhachHang WHERE sdt = ?", sdt)
            khach = cursor.fetchone()
            if khach:
                new_kh_id = khach[0]
            else:
                cursor.execute("SELECT COUNT(*) FROM KhachHang")
                kh_count = cursor.fetchone()[0]
                new_kh_id = f"KH{kh_count + 1:03}"
                cursor.execute(
                    "INSERT INTO KhachHang (idKhachHang, Ten, sdt, idAccount) VALUES (?, ?, ?, ?)",
                    new_kh_id, ten, sdt, None
                )
            # 3. T·∫°o id ƒë·∫∑t b√†n
            cursor.execute("SELECT COUNT(*) FROM DatBan")
            count = cursor.fetchone()[0]
            idDatBan = f"DB{count + 1:03}"

            # 4. Th√™m v√†o DatBan
            cursor.execute("""
                INSERT INTO DatBan (idDatBan, idBan, ngayDat, gioDat, trangThaiDat, idKhachHang)
                VALUES (?, ?, ?, ?, N'ƒê√£ ƒë·∫∑t', ?)
            """, idDatBan, valid_ban, ngay, gio, new_kh_id)

            # 5. Th√™m v√†o b·∫£ng DatBanOnline
            cursor.execute("""
                INSERT INTO DatBanOnline (idDatBanOnline, tenKhachHang, email, soDienThoai,
                ngayDat, gioDat, soNguoi, ghiChu, trangThai, ngayGui)
                VALUES (?, ?, ?, ?, ?, ?, ?, ?, N'Ch∆∞a x·ª≠ l√Ω', ?)
            """, idDatBan, ten, email, sdt, ngay, gio, soNguoi, ghiChu, datetime.now())

            # 6. C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
            cursor.execute("UPDATE Ban SET trangThai = N'ƒê·∫∑t tr∆∞·ªõc' WHERE idBan = ?", valid_ban)

            conn.commit()
            return jsonify({"message": "ƒê·∫∑t b√†n th√†nh c√¥ng", "maDatBan": idDatBan}), 200

    except Exception as e:
        conn.rollback()
        return jsonify({"error": str(e)}), 500

# API: L·∫•y danh m·ª•c m√≥n
@app.route('/api/danhmuc', methods=['GET'])
def get_danh_muc():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM DanhMucMon")
            columns = [column[0] for column in cursor.description]
            results = [dict(zip(columns, row)) for row in cursor.fetchall()]
            return jsonify(results), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API: L·∫•y danh s√°ch ƒë·∫∑t b√†n
@app.route('/api/datban', methods=['GET'])
def get_dat_ban():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT db.idDatBan, db.idBan, kh.Ten, db.ngayDat, db.gioDat, db.trangThaiDat
                FROM DatBan db
                JOIN KhachHang kh ON db.idKhachHang = kh.idKhachHang
            """)
            results = []
            now = datetime.now()
            two_hours_later = now + timedelta(hours=2)

            for r in cursor.fetchall():
                id, ban, ten, ngay, gio, trangThai = r

                # Convert ng√†y v√† gi·ªù ƒë√∫ng ƒë·ªãnh d·∫°ng
                ngay_dt = ngay if isinstance(ngay, date) else datetime.strptime(str(ngay), '%Y-%m-%d').date()
                gio_str = str(gio).split('.')[0]  # ‚úÖ X·ª≠ l√Ω l·ªói .0000000
                gio_dt = datetime.strptime(gio_str, '%H:%M:%S').time()

                # So s√°nh ng√†y gi·ªù
                thoiDiemDat = datetime.combine(ngay_dt, gio_dt)
                new_status = "ƒê√£ s·ª≠ d·ª•ng" if thoiDiemDat < now else "ƒê√£ ƒë·∫∑t"

                # C·∫≠p nh·∫≠t tr·∫°ng th√°i n·∫øu c·∫ßn
                if trangThai != new_status:
                    update_cursor = conn.cursor()
                    update_cursor.execute(
                        "UPDATE DatBan SET trangThaiDat = ? WHERE idDatBan = ?",
                        new_status, id
                    )
                    conn.commit()
                    trangThai = new_status

                results.append({
                    'id': id,
                    'ban': ban,
                    'tenKhach': ten,
                    'ngay': ngay_dt.strftime('%Y-%m-%d'),
                    'gio': gio_dt.strftime('%H:%M'),
                    'trangThai': trangThai
                })
            # Truy v·∫•n c√°c b√†n hi·ªán ƒëang tr·ªëng (kh√¥ng c√≥ ƒë·∫∑t b√†n h·ª£p l·ªá s·∫Øp t·ªõi)
            cursor.execute("""
                SELECT b.idBan, b.tenBan
                FROM Ban b
                WHERE b.idBan NOT IN (
                    SELECT db.idBan
                    FROM DatBan db
                    WHERE 
                        db.trangThaiDat = 'ƒê√£ ƒë·∫∑t'
                        AND (
                             CAST(db.ngayDat AS DATETIME)+ CAST(db.gioDat AS DATETIME) BETWEEN ? AND ?
                        )
                )
            """, (now,two_hours_later))

            ban_trong = [{"idBan": row[0], "tenBan": row[1]} for row in cursor.fetchall()]


            return jsonify({
                "datBan": results,
                "banTrong": ban_trong
            }), 200

    except Exception as e:
        print("üî• L·ªñI API /api/datban:", e)
        return jsonify({'error': str(e)}), 500

@app.route("/api/taohoadon", methods=["POST"])
def tao_hoa_don():
    data = request.get_json()
    idBan = data.get("idBan")
    danh_sach_mon = data.get("mon", [])  # m·∫£ng nhi·ªÅu m√≥n
    isKhachMoi = data.get("isKhachMoi", False)
    khachMoi = data.get("khachMoi", {})
    phuongthucThanhToan = data.get("phuongthucThanhToan", "Ti·ªÅn m·∫∑t")

    if not danh_sach_mon:
        return jsonify({"error": "Danh s√°ch m√≥n tr·ªëng!"}), 400

    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # 1. X·ª≠ l√Ω kh√°ch h√†ng
            idKhach = None
            if isKhachMoi:
                sdt = khachMoi.get("sdt")
                ten = khachMoi.get("ten")
                cursor.execute("SELECT idKhachHang FROM KhachHang WHERE sdt = ?", sdt)
                kh = cursor.fetchone()
                if kh:
                    idKhach = kh[0]
                else:
                    cursor.execute("SELECT COUNT(*) FROM KhachHang")
                    count_kh = cursor.fetchone()[0]
                    idKhach = f"KH{count_kh + 1:03}"
                    cursor.execute("INSERT INTO KhachHang (idKhachHang, Ten, sdt, idAccount) VALUES (?, ?, ?, NULL)",
                                   idKhach, ten, sdt)
            else:
                cursor.execute("""
                    SELECT idKhachHang FROM DatBan 
                    WHERE idBan = ? AND trangThaiDat = N'ƒê√£ ƒë·∫∑t'
                    ORDER BY ngayDat DESC, gioDat DESC
                """, idBan)
                row = cursor.fetchone()
                if row:
                    idKhach = row[0]
                else:
                    return jsonify({"error": "Kh√¥ng t√¨m th·∫•y kh√°ch ƒë·∫∑t tr∆∞·ªõc"}), 400

            # 2. T·∫°o h√≥a ƒë∆°n
            cursor.execute("SELECT COUNT(*) FROM HoaDonBan")
            count_hd = cursor.fetchone()[0]
            idHDB = f"HDB{count_hd + 1:03}"
            ngayLap = datetime.now()

            cursor.execute("""
                INSERT INTO HoaDonBan (idHDB, phuongThucThanhToan, idKhachHang, ngayLap)
                VALUES (?, ?, ?,?)
            """, idHDB, phuongthucThanhToan, idKhach, ngayLap)

            tongTien = 0

            # 3. Ghi nhi·ªÅu m√≥n v√†o ChiTietHDB
            for mon in danh_sach_mon:
                idMon = mon.get("idMon")
                soLuong = int(mon.get("soLuong", 0))
                if soLuong <= 0:
                    continue

                # L·∫•y ƒë∆°n gi√°
                cursor.execute("SELECT giaBan FROM ThucDon WHERE idMon = ?", idMon)
                gia = cursor.fetchone()
                if not gia:
                    continue  # b·ªè qua n·∫øu m√≥n kh√¥ng t·ªìn t·∫°i
                gia = gia[0]
                thanhTien = gia * soLuong
                tongTien += thanhTien

                # Sinh idChiTietHDB
                cursor.execute("SELECT COUNT(*) FROM ChiTietHDB")
                count_ct = cursor.fetchone()[0]
                idChiTietHDB = f"CTHDB{count_ct + 1:03}"

                cursor.execute("""
                    INSERT INTO ChiTietHDB (idChiTietHDB, idHDB, idMon, soLuongBan, thanhTienBan)
                    VALUES (?, ?, ?, ?, ?)
                """, idChiTietHDB, idHDB, idMon, soLuong, thanhTien)

            # 4. C·∫≠p nh·∫≠t t·ªïng ti·ªÅn h√≥a ƒë∆°n n·∫øu c·∫ßn
            cursor.execute("UPDATE HoaDonBan SET tongTienBan = ? WHERE idHDB = ?", tongTien, idHDB)

            # 5. C·∫≠p nh·∫≠t tr·∫°ng th√°i b√†n
            if isKhachMoi:
                cursor.execute("UPDATE Ban SET trangThai = N'ƒê√£ s·ª≠ d·ª•ng' WHERE idBan = ?", idBan)
            else:
                cursor.execute("UPDATE DatBan SET trangThaiDat = N'ƒê√£ s·ª≠ d·ª•ng' WHERE idBan = ?", idBan)
                cursor.execute("UPDATE Ban SET trangThai = N'ƒê√£ s·ª≠ d·ª•ng' WHERE idBan = ?", idBan)

            conn.commit()
            return jsonify({"message": f"H√≥a ƒë∆°n {idHDB} ƒë√£ ƒë∆∞·ª£c t·∫°o.", "tongTien": tongTien}), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

# API: L·∫•y danh s√°ch m√≥n ƒë·∫ßy ƒë·ªß
@app.route('/api/thucdon_full', methods=['GET'])
def get_thucdon_full():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT td.idMon, td.tenMon, td.giaBan, td.idDanhMuc, dm.tenDanhMuc, td.GioiThieuMon
                FROM ThucDon td
                JOIN DanhMucMon dm ON td.idDanhMuc = dm.idDanhMuc
            """)
            rows = cursor.fetchall()
            result = [dict(
                idMon=row[0],
                tenMon=row[1],
                giaBan=row[2],
                idDanhMuc=row[3],
                tenDanhMuc=row[4],
                gioiThieuMon=row[5]
            ) for row in rows]
            return jsonify(result), 200
    except Exception as e:
        return jsonify({'error': str(e)}), 500

# API: Th√™m m√≥n m·ªõi
@app.route('/api/themmon', methods=['POST'])
def them_mon():
    try:
        data = request.get_json()
        idMon = data.get("idMon")
        tenMon = data.get("tenMon")
        giaBan = data.get("giaBan")
        idDanhMuc = data.get("idDanhMuc")
        gioiThieuMon = data.get("gioiThieuMon")

        if not all([idMon, tenMon, giaBan, idDanhMuc]):
            return jsonify({"error": "Thi·∫øu th√¥ng tin b·∫Øt bu·ªôc!"}), 400

        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                INSERT INTO ThucDon (idMon, tenMon, giaBan, idDanhMuc, GioiThieuMon)
                VALUES (?, ?, ?, ?, ?)
            """, idMon, tenMon, giaBan, idDanhMuc, gioiThieuMon)
            conn.commit()
            return jsonify({"message": "‚úÖ Th√™m m√≥n th√†nh c√¥ng!"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# API: X√≥a m√≥n
@app.route('/api/xoamon/<idMon>', methods=['DELETE'])
def xoa_mon(idMon):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("DELETE FROM ThucDon WHERE idMon = ?", idMon)
            conn.commit()
            return jsonify({"message": "‚úÖ ƒê√£ x√≥a m√≥n th√†nh c√¥ng!"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# H√†m ph·ª• tr·ª£

def get_idDanhMuc_by_tenDanhMuc(tenDanhMuc):
    with get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT idDanhMuc FROM DanhMucMon WHERE tenDanhMuc = ?", tenDanhMuc)
        row = cursor.fetchone()
        return row[0] if row else None

# API: S·ª≠a m√≥n
@app.route('/api/suamon', methods=['PUT'])
def sua_mon():
    try:
        data = request.get_json()
        idMon = data.get("idMon")
        tenMon = data.get("tenMon")
        giaBan = data.get("giaBan")
        tenDanhMuc = data.get("tenDanhMuc")
        gioiThieuMon = data.get("gioiThieuMon")

        idDanhMuc = get_idDanhMuc_by_tenDanhMuc(tenDanhMuc)
        if not idDanhMuc:
            return jsonify({"error": f"Kh√¥ng t√¨m th·∫•y danh m·ª•c '{tenDanhMuc}'"}), 400

        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE ThucDon
                SET tenMon = ?, giaBan = ?, idDanhMuc = ?, GioiThieuMon = ?
                WHERE idMon = ?
            """, tenMon, giaBan, idDanhMuc, gioiThieuMon, idMon)
            conn.commit()
            return jsonify({"message": "‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!"}), 200
    except Exception as e:
        return jsonify({"error": str(e)}), 500

#thong ke
@app.route('/api/thongke/doanhthu', methods=['GET'])
def thong_ke_doanh_thu():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT 
                    hdb.idHDB, 
                    hdb.ngayLap, 
                    SUM(ct.thanhTienBan) AS tongTien
                FROM HoaDonBan hdb
                JOIN ChiTietHDB ct ON hdb.idHDB = ct.idHDB
                GROUP BY hdb.idHDB, hdb.ngayLap
            """)
            rows = cursor.fetchall()

            thongke = {
                "theoNgay": {},
                "theoThang": {},
                "theoNam": {},
                "theoQuy": {}
            }

            for idHDB, ngayLap, tongTien in rows:
                if isinstance(ngayLap, str):
                    ngayLap = datetime.strptime(ngayLap, "%Y-%m-%d")

                ngay = ngayLap.strftime("%Y-%m-%d")
                thang = ngayLap.strftime("%Y-%m")
                nam = ngayLap.year
                quy = (ngayLap.month - 1) // 3 + 1
                key_quy = f"{nam}-Q{quy}"

                # C·ªông d·ªìn doanh thu v√†o t·ª´ng lo·∫°i th·ªëng k√™
                thongke["theoNgay"][ngay] = thongke["theoNgay"].get(ngay, 0) + tongTien
                thongke["theoThang"][thang] = thongke["theoThang"].get(thang, 0) + tongTien
                thongke["theoNam"][str(nam)] = thongke["theoNam"].get(str(nam), 0) + tongTien
                thongke["theoQuy"][key_quy] = thongke["theoQuy"].get(key_quy, 0) + tongTien

            return jsonify(thongke), 200

    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route('/api/donhang', methods=['POST'])
def them_don_hang():
    data = request.get_json()
    ten = data.get('ten')
    sdt = data.get('sdt')
    diachi = data.get('diaChi')
    phiShip = data.get('phiShip') or 0
    phiShip = int(phiShip)
    gioHang = data.get('gioHang')
    idAccount = data.get("idAccount")

    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # T√≠nh t·ªïng ti·ªÅn
            tongTien = sum(item['gia'] * item['soLuong'] for item in gioHang) + phiShip

            # Th√™m v√†o b·∫£ng DonHang
            cursor.execute("""
                INSERT INTO DonHang (tenNguoiNhan, sdt, diaChi, phiShip, tongTien,trangThai,idAccount)
                OUTPUT INSERTED.idDonHang
                VALUES (?, ?, ?, ?, ?, ?, ?)""",
                ten, sdt, diachi, phiShip, tongTien,"Ch·ªù x√°c nh·∫≠n",idAccount
            )
            id_don = cursor.fetchone()[0]

            # Th√™m c√°c s·∫£n ph·∫©m v√†o ChiTietDonHang
            for item in gioHang:
                cursor.execute("""
                    INSERT INTO ChiTietDonHang (idDonHang, idMon, tenMon, gia, soLuong)
                    VALUES (?, ?, ?, ?, ?)""",
                    id_don, item['id'], item['ten'], item['gia'], item['soLuong']
                )

            conn.commit()

        return jsonify({"success": True, "message": "ƒê·∫∑t h√†ng th√†nh c√¥ng!"}), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500
@app.route('/api/donhang_user/<idAccount>', methods=['GET'])
def get_donhang_user(idAccount):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT idDonHang, tenNguoiNhan, diaChi, tongTien, phiShip, trangThai
                FROM DonHang
                WHERE idAccount = ?
                ORDER BY idDonHang DESC
            """, idAccount)
            rows = cursor.fetchall()

            result = []
            for row in rows:
                result.append({
                    "idDonHang": row[0],
                    "ten": row[1],
                    "diaChi": row[2],
                    "tongTien": row[3],
                    "phiShip": row[4],
                    "trangThai": row[5]
                })

        return jsonify(result), 200

    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500
    
@app.route('/api/huy_donhang/<idDonHang>', methods=['PUT'])
def huy_don_hang(idDonHang):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            # Ch·ªâ cho h·ªßy n·∫øu ƒëang ·ªü tr·∫°ng th√°i "Ch·ªù x√°c nh·∫≠n"
            cursor.execute("SELECT trangThai FROM DonHang WHERE idDonHang = ?", idDonHang)
            row = cursor.fetchone()
            if not row or row[0] != "Ch·ªù x√°c nh·∫≠n":
                return jsonify({"success": False, "message": "Kh√¥ng th·ªÉ h·ªßy ƒë∆°n h√†ng n√†y."}), 400

            cursor.execute("UPDATE DonHang SET trangThai = 'ƒê√£ h·ªßy' WHERE idDonHang = ?", idDonHang)
            conn.commit()
        return jsonify({"success": True, "message": "ƒê√£ h·ªßy ƒë∆°n h√†ng."}), 200
    except Exception as e:
        return jsonify({"success": False, "message": str(e)}), 500

@app.route("/api/donhang/cho_duyet", methods=["GET"])
def lay_don_hang_cho_duyet():
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                SELECT idDonHang, tenNguoiNhan, sdt, diaChi, tongTien, trangThai
                FROM DonHang
                WHERE trangThai = N'Ch·ªù x√°c nh·∫≠n'
            """)
            rows = cursor.fetchall()
            result = [{
                "idDonHang": r[0],
                "ten": r[1],
                "sdt": r[2],
                "diaChi": r[3],
                "tongTien": r[4],
                "trangThai": r[5]
            } for r in rows]
            return jsonify(result)
    except Exception as e:
        return jsonify({"error": str(e)}), 500

@app.route("/api/duyet_donhang/<idDonHang>", methods=["PUT"])
def duyet_don_hang(idDonHang):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("""
                UPDATE DonHang SET trangThai = N'ƒê√£ x√°c nh·∫≠n' 
                WHERE idDonHang = ? AND trangThai = N'Ch·ªù x√°c nh·∫≠n'
            """, (idDonHang,))
            conn.commit()
            return jsonify({"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c duy·ªát!"})
    except Exception as e:
        return jsonify({"error": str(e)}), 500
@app.route("/api/nhan_hang/<idDonHang>", methods=["PUT"])
def nhan_hang(idDonHang):
    try:
        with get_connection() as conn:
            cursor = conn.cursor()

            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë∆°n h√†ng th√†nh "ƒê√£ ho√†n th√†nh"
            cursor.execute("""
                UPDATE DonHang
                SET trangThai = N'ƒê√£ ho√†n th√†nh'
                WHERE idDonHang = ?
            """, idDonHang)

            # Th√™m v√†o b·∫£ng HoaDonBan
            cursor.execute("SELECT idAccount, tongTien FROM DonHang WHERE idDonHang = ?", idDonHang)
            info = cursor.fetchone()
            if not info:
                return jsonify({"error": "Kh√¥ng t√¨m th·∫•y ƒë∆°n h√†ng"}), 404
            idAccount, tongTien = info

            cursor.execute("SELECT COUNT(*) FROM HoaDonBan")
            count = cursor.fetchone()[0]
            idHDB = f"HDB{count + 1:03}"
            ngayLap = datetime.now()

            cursor.execute("""
                INSERT INTO HoaDonBan (idHDB, idKhachHang, tongTienBan, ngayLap)
                VALUES (?, ?, ?, ?)
            """, idHDB, idAccount, tongTien, ngayLap)

            conn.commit()
            return jsonify({"message": "ƒê∆°n h√†ng ƒë√£ ƒë∆∞·ª£c chuy·ªÉn sang tr·∫°ng th√°i ho√†n th√†nh v√† l∆∞u v√†o h√≥a ƒë∆°n b√°n."})
    except Exception as e:
        return jsonify({"error": str(e)}), 500


if __name__ == '__main__':
    print("‚úÖ Flask server is running at http://localhost:5000")
    app.run(debug=True)